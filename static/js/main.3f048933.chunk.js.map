{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","props","current","count","onChangeCurrentPage","useState","numbers","setNumbers","useEffect","Array","fill","map","_","index","getNumbers","className","classNames","disabled","href","onClick","number","active","length","items","from","to","n","push","App","countPerPage","setCountPerPage","currentPage","setCurrentPage","slice","visibleItems","setVisibleItems","newVisibleItems","start","end","getVisibleItems","title","updateTitle","id","value","onChange","event","newCount","target","htmlFor","Math","ceil","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f048933.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC, useEffect, useState } from 'react';\n\nconst getNumbers = (count: number) => {\n  return Array(count)\n    .fill(0)\n    .map((_, index) => index + 1);\n};\n\ntype PaginationProps = {\n  current: number,\n  count: number,\n  onChangeCurrentPage: (number:number) => void\n};\n\nexport const Pagination: FC<PaginationProps> = (props) => {\n  const { current, count, onChangeCurrentPage } = props;\n\n  const [numbers, setNumbers] = useState<number[]>([]);\n\n  useEffect(() => {\n    setNumbers(getNumbers(count));\n  }, [count]);\n\n  const incrementCurrentPage = () => {\n    if (current + 1 > numbers.length) {\n      return;\n    }\n\n    onChangeCurrentPage(current + 1);\n  };\n\n  const decrementCurrentPage = () => {\n    if (current - 1 < 1) {\n      return;\n    }\n\n    onChangeCurrentPage(current - 1);\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li\n        className={classNames(\n          'page-item',\n          {\n            disabled: current === 1,\n          },\n        )}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={current === 1}\n          onClick={decrementCurrentPage}\n        >\n          «\n        </a>\n      </li>\n\n      {numbers.map(number => (\n        <li\n          className={classNames(\n            'page-item',\n            {\n              active: number === current,\n            },\n          )}\n          key={number}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href=\"#1\"\n            onClick={() => onChangeCurrentPage(number)}\n          >\n            {number}\n          </a>\n        </li>\n      ))}\n\n      <li\n        className={classNames(\n          'page-item',\n          {\n            disabled: current === numbers.length,\n          },\n        )}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={current === numbers.length}\n          onClick={incrementCurrentPage}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst updateTitle = (currentPage: number, countPerPage: number) => {\n  const isLastPage = ((currentPage - 1) * countPerPage + 1)\n  === items.length - 1;\n\n  const from = (currentPage - 1) * countPerPage + 1;\n  const to = isLastPage\n    ? items.length\n    : ((currentPage - 1) * countPerPage) + countPerPage;\n\n  return `Page ${currentPage} (items ${from} - ${to} of ${items.length})`;\n};\n\nconst getVisibleItems = (currentPage: number, countPerPage: number) => {\n  const start = (currentPage - 1) * countPerPage;\n  const end = countPerPage + start;\n\n  return items.slice(start, end);\n};\n\nexport const App: React.FC = () => {\n  const [countPerPage, setCountPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [visibleItems, setVisibleItems] = useState(items\n    .slice(0, countPerPage));\n\n  useEffect(() => {\n    const newVisibleItems = getVisibleItems(currentPage, countPerPage);\n\n    setVisibleItems(newVisibleItems);\n  }, [countPerPage, currentPage]);\n\n  const changeCountPerPage = (newCount: number) => {\n    setCountPerPage(newCount);\n    setCurrentPage(1);\n  };\n\n  const changeCurrentPage = (current: number) => {\n    setCurrentPage(current);\n  };\n\n  const title = updateTitle(currentPage, countPerPage);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {title}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={countPerPage}\n            onChange={(event) => changeCountPerPage(+event.target.value)}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        current={currentPage}\n        count={Math.ceil(items.length / countPerPage)}\n        onChangeCurrentPage={changeCurrentPage}\n      />\n      <ul>\n        {visibleItems.map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}